from collections import defaultdict, deque

def cutTheTree(data, edge_data):
    n = len(data)
    tree_sum = sum(data)
    
    # saving edges
    edges = defaultdict(list)
    for u,v in edge_data:
        edges[u].append(v)
        edges[v].append(u)
        
    # bfs algorithm to save height of each node
    
    visited = [False]*n
    height = defaultdict(list)
    node_ht = {}
    
    def bfs():
        q = deque([1])
        height[1].append(1)
        node_ht[1] = 1
        visited[0] = True
        
        while q:
            u = q.popleft()
            for v in edges[u]:
                if (visited[v-1]==False):
                    node_ht[v]=node_ht[u]+1
                    height[node_ht[v]].append(v)
                    visited[v-1]=True
                    q.append(v)
    bfs()
    
    sorted_ht = sorted(height.keys(), reverse=True)
    node_sum={1:data[0]}
    
    for h in sorted_ht[:-1]:
        for hi in height[h]:
            node_sum[hi] = node_sum.get(hi,0)+data[hi-1]
            for v in edges[hi]:
                if (node_ht[v] == node_ht[hi]-1):
                    node_sum[v] = node_sum.get(v, 0) + node_sum[hi]
                    
    ans = float('inf')
    for i in node_sum:
        if i != 1:
            ans = min(ans, abs(tree_sum-node_sum[i]*2))
    return ans
